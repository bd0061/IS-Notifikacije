// <auto-generated />
using System;
using MailBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MailBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MailBackend.Models.Kurs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PunoIme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sifra")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Kursevi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PunoIme = "Baze podataka",
                            Sifra = "db"
                        },
                        new
                        {
                            Id = 2,
                            PunoIme = "Baze podataka 2",
                            Sifra = "db2"
                        },
                        new
                        {
                            Id = 3,
                            PunoIme = "Baze podataka 3",
                            Sifra = "db3"
                        },
                        new
                        {
                            Id = 4,
                            PunoIme = "Programski jezici",
                            Sifra = "pj"
                        },
                        new
                        {
                            Id = 5,
                            PunoIme = "Uvod u informacione sisteme",
                            Sifra = "uis"
                        },
                        new
                        {
                            Id = 6,
                            PunoIme = "Jezici i okruzenja za razvoj IS",
                            Sifra = "joris"
                        },
                        new
                        {
                            Id = 7,
                            PunoIme = "Modelovanje poslovnih procesa",
                            Sifra = "mpp"
                        },
                        new
                        {
                            Id = 8,
                            PunoIme = "Analiza i logicko projektovanje IS",
                            Sifra = "ailp"
                        },
                        new
                        {
                            Id = 9,
                            PunoIme = "Poslovni informacioni sistemi",
                            Sifra = "poslis"
                        },
                        new
                        {
                            Id = 10,
                            PunoIme = "Projektovanje informacionih sistema",
                            Sifra = "pis"
                        },
                        new
                        {
                            Id = 11,
                            PunoIme = "Strukture podataka i algoritmi",
                            Sifra = "spa"
                        },
                        new
                        {
                            Id = 12,
                            PunoIme = "Fizicko projektovanje informacionih sistema",
                            Sifra = "fpis"
                        },
                        new
                        {
                            Id = 13,
                            PunoIme = "Administracija baze podataka",
                            Sifra = "abp"
                        },
                        new
                        {
                            Id = 14,
                            PunoIme = "Integrisana softverska resenja",
                            Sifra = "isr"
                        },
                        new
                        {
                            Id = 15,
                            PunoIme = "Informacioni sistemi za upravljanje znanjem",
                            Sifra = "isuz"
                        },
                        new
                        {
                            Id = 16,
                            PunoIme = "ISiT Menadzment",
                            Sifra = "isitm"
                        },
                        new
                        {
                            Id = 17,
                            PunoIme = "Upravljanje razvojem informacionih sistema",
                            Sifra = "uris"
                        },
                        new
                        {
                            Id = 18,
                            PunoIme = "Programski prevodioci",
                            Sifra = "prev"
                        });
                });

            modelBuilder.Entity("MailBackend.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SubTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UnsubToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("VerifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isVerified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Studenti");
                });

            modelBuilder.Entity("MailBackend.Models.StudentKurs", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("KursId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "KursId");

                    b.HasIndex("KursId");

                    b.ToTable("StudentKursevi");
                });

            modelBuilder.Entity("MailBackend.Models.StudentKurs", b =>
                {
                    b.HasOne("MailBackend.Models.Kurs", "Kurs")
                        .WithMany("StudentKursevi")
                        .HasForeignKey("KursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MailBackend.Models.Student", "Student")
                        .WithMany("StudentKursevi")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kurs");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("MailBackend.Models.Kurs", b =>
                {
                    b.Navigation("StudentKursevi");
                });

            modelBuilder.Entity("MailBackend.Models.Student", b =>
                {
                    b.Navigation("StudentKursevi");
                });
#pragma warning restore 612, 618
        }
    }
}
